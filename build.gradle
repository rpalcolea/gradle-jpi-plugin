plugins {
    id 'groovy'
    id 'maven-publish'
    id 'signing'
    id 'codenarc'
    id 'com.gradle.plugin-publish' version '0.11.0'
    id 'java-gradle-plugin'
}

repositories {
    // using JCenter for dependency resolution is recommended, see https://plugins.gradle.org/docs/publish-plugin
    jcenter()
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

def sezpoz = 'net.java.sezpoz:sezpoz:1.13'

dependencies {
    annotationProcessor sezpoz
    implementation gradleApi()
    implementation 'org.jvnet.localizer:maven-localizer-plugin:1.13'
    implementation 'org.jenkins-ci:version-number:1.0'
    implementation sezpoz
    implementation localGroovy()
    testAnnotationProcessor sezpoz
    testImplementation('org.spockframework:spock-core:1.2-groovy-2.5') {
        exclude module: 'groovy-all' // use the version that is distributed with Gradle
    }
    testImplementation 'org.xmlunit:xmlunit-core:2.3.0'
    testImplementation 'org.apache.commons:commons-text:1.6'
}

publishing {
    publications {
        pluginMaven(MavenPublication) {
            pom {
                name = 'Gradle JPI Plugin'
                description = 'The Gradle JPI plugin is a Gradle plugin for building Jenkins plugins'
                url = 'http://github.com/jenkinsci/gradle-jpi-plugin'
                scm {
                    url = 'https://github.com/jenkinsci/gradle-jpi-plugin'
                }
                licenses {
                    license {
                        name = 'Apache 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        id = 'abayer'
                        name = 'Andrew Bayer'
                    }
                    developer {
                        id = 'kohsuke'
                        name = 'Kohsuke Kawaguchi'
                    }
                    developer {
                        id = 'daspilker'
                        name = 'Daniel Spilker'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def path = version.toString().endsWith('SNAPSHOT') ? 'snapshots' : 'releases'
            name = 'JenkinsCommunity'
            url = "https://repo.jenkins-ci.org/${path}"
            credentials {
                username = project.findProperty('jenkins.username')
                password = project.findProperty('jenkins.password')
            }
        }
    }
}

signing {
    useGpgCmd()
    required { project.hasProperty('jenkins.username') && project.hasProperty('jenkins.password') }
    sign publishing.publications.pluginMaven
}

tasks.addRule("Pattern: testGradle<ID>") { String taskName ->
    if (!taskName.startsWith('testGradle')) return
    tasks.register(taskName, Test) { Test t ->
        def gradleVersion = taskName - 'testGradle'
        t.systemProperty 'gradle.under.test', gradleVersion
        t.useJUnit { JUnitOptions o ->
            o.includeCategories('org.jenkinsci.gradle.plugins.jpi.UsesGradleTestKit')
        }
        t.onlyIf {
            gradleVersion.startsWith('4') && System.getProperty('java.specification.version') == '1.8' ||
                    gradleVersion.startsWith('5')
        }
    }
}

check.dependsOn(['4.10.3', '5.0', '5.1.1', '5.2.1', '5.3.1'].collect { tasks.named("testGradle$it") })

tasks.withType(Test).configureEach {
    testLogging {
        exceptionFormat = 'full'
    }
}

codenarc {
    toolVersion = '1.1'
    configFile = file('config/codenarc/rules.groovy')
}

codenarcTest {
    configFile = file('config/codenarc/rules-test.groovy')
}

group = 'org.jenkins-ci.tools'
archivesBaseName = 'gradle-jpi-plugin'
description = 'Gradle plugin for building and packaging Jenkins plugins'

gradlePlugin {
    plugins {
        pluginMaven {
            id = 'org.jenkins-ci.jpi'
            implementationClass = 'org.jenkinsci.gradle.plugins.jpi.JpiPlugin'
            displayName = 'A plugin for building Jenkins plugins'
        }
    }
}

pluginBundle {
    website = 'https://wiki.jenkins-ci.org/display/JENKINS/Gradle+JPI+Plugin'
    vcsUrl = 'https://github.com/jenkinsci/gradle-jpi-plugin'
    description = 'A plugin for building Jenkins plugins'
    tags = ['jenkins']
}
